---
title: "Lerna monorepos with fewer tags"
layout: layouts/post.njk
teaser: "Getting the perks of monorepo publishing while curating our git tags and release notes."
image: "/blog/shreaded-paper.jpg"
image_meta:
  text: 'It can be hard to get a concise view of what has changed in a monorepo release. Image by <a href="https://www.flickr.com/photos/guyfromva/2440475312/in/photolist-4HE5hy-7acoqE-33eWkq-5k2vNM-GQXqCM-aufLVj-3ceJK-VWFX6i-9dDyi3-3ZWDpo-W4Ji41-8ah3ew-5VZBzj-86AAki-SYij8G-9JhPVR-4XTtJy-PEZT4m-4XPbwx-2iUjWZz-62wjgx-DDhS4-9QWCbn-ap6dmG-apshZy-9jFi89-7tUw7Y-4thUJL-4thUb5-r8YFQh-2ecwu9T-4LyZB6-7adFYV-afgCC-F7icnS-9717Pj-eaQywa-audc2t-62AzwY-akYANr-62Azn3-2hawovo-62AyQh-r98YVS-62wjzx-bthTD1-2byiNPL-QFUUX8-8f2A5K-2jtA8L4">Mike Haw</a>.'
  altext: "Shredded paper pile"
date: 2020-11-11
# url: /posts/20201105-using-lerna-with-fewer-tags-and-custom-release-notes.html
active_path: blog
tags: posts
topics:
  - static sites, blogging
---

{% markdown %}

For the [Visual Framework](https://stable.visual-framework.dev/), a front-end component library, we're developing its [112 npm packages](https://www.npmjs.com/search?q=%40visual-framework) as a monorepo using the tool [Lerna](https://lerna.js.org/).

Lerna works out of the box quite well, allowing us to manage all of our components in a single project and easily publishing them to npm. However, the default did two things we didn't like:

- Each release created a new tag per updated component and we were on our way to [1,000s of tags](https://www.google.com/search?q=lerna+too+many+tags) in our project.
- Release notes were not easy to curate and using [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) didn't suit our workflow.

## What we want

- make one tag for each overall `lerna publish` [release](https://github.com/visual-framework/vf-core/releases)
- use git to harvest the changes in each `CHANGELOG.md` to generate release notes as an ["update" on the website](https://stable.visual-framework.dev/updates/)

## How we get it

### Generate the release notes 

We run the aliased command `yarn run releasenotes` that invokes a git dump:

<section class="kh-bleed-out">
{% codeblock 'bash' -%}
git show -U0 --raw $(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1  --max-count=1))..$(git describe --abbrev=0 --tags $(git rev-list --tags  --max-count=1)) --pretty=format:'commit: %H %n abbreviated_commit: %h %n subject: %s %n   sanitized_subject_line:  %f %n  date :  %aD %n  commiter : %cN %n' --output=tools/vf-component-library/src/site/updates/$(date +%F)-component-updates.md -- **/CHANGELOG.md 
{% endcodeblock %}
</section>

<br/>I'll walk through that chunk of code:

1. Show the raw git history: <br/>
      `git show -U0 --raw`
2. Since the most recent tag: <br/>
      `$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1  --max-count=1))..$(git describe --abbrev=0 --tags $(git rev-list --tags  --max-count=1))`
3. In this format: <br/>
      `--pretty=format:'commit: %H %n abbreviated_commit: %h %n subject: %s %n   sanitized_subject_line:  %f %n  date :  %aD %n  commiter : %cN %n'`
4. Add a new post file to the `updates` directory:<br/>
      `--output=tools/vf-component-library/src/site/updates/$(date +%F)-component-updates.md `
5. Add the diff from any `CHANGELOG.md` changes:<br/>
      ` -- **/CHANGELOG.md `

That still leaves us to add on the frontmatter and massage the content, but with the help of a macro it's a pretty quick task:

{% endmarkdown %}
<section class="kh-bleed-out">
{% codeblock 'markdown' -%}
{% verbatim %}
{% macro notes(component='vf-xxx', componentVersion='9.9.9', commitId='0123456789') %}

### [{{component}}](https://visual-framework.github.io/vf-core/components/{{component}}/) 

- <span class="vf-badge">{{ componentVersion }}</span> 
- <a href="https://www.npmjs.com/package/@visual-framework/{{component}}/v/{{componentVersion}}" class="vf-badge">npm</a> 
- <a href="https://github.com/visual-framework/vf-core/commit/{{commitId}}" class="vf-badge">git diff</a>

{% endmacro %}
{% endverbatim %}
{% endcodeblock %}
</section>
{% markdown %}

<br/>Here's [an example release notes update](https://stable.visual-framework.dev/updates/2020-11-06-component-updates/) and [its 11ty source code](https://github.com/visual-framework/vf-core/blob/develop/tools/vf-component-library/src/site/updates/2020-11-06-component-updates.md). 

### Make a reference git tag for Lerna

1. Run Lerna publish and skip git tags: `lerna publish --no-git-tag-version --no-push` 
2. Lerna publishes to npm and does cross-dependency updates to each component's `package.json`. 
3. Commit the `package.json` updates to our main git branch
4. Create a manual tag `git tag -a v2.3.whatever -m 'Combined snapshot of packages'`
5. Push our new tag `git push origin --tags`

Now running `lerna changed` shows the expected "No changed packages".

## It works well for us

To be clear, we don't think there is anything "wrong" with Lerna's default publishing flow, however it didn't suit our needs. This is an alternative approach. 

{% endmarkdown %}
